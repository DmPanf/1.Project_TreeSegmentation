#from PyQt5.QtWidgets import QApplication, QWidget, QLabel, QVBoxLayout, QHBoxLayout, QPushButton, QFileDialog, QFrame
from PyQt5.QtWidgets import QApplication, QWidget, QLabel, QPushButton, QVBoxLayout, QHBoxLayout, QFileDialog, QFrame
from PyQt5.QtWidgets import QGraphicsView, QGraphicsScene, QDesktopWidget, QListWidget, QListWidgetItem, QMessageBox
from PyQt5.QtWidgets import QDialog, QLineEdit, QVBoxLayout, QFormLayout, QRadioButton, QDialogButtonBox
from PyQt5.QtGui import QPixmap, QFont
from PyQt5.QtGui import QFont
from PyQt5.QtCore import Qt, QByteArray, QBuffer, QIODevice
from datetime import datetime
from io import BytesIO
import requests
import json
import sys
import os
from bar import CustomPlot

class MainWindow(QWidget):
    def __init__(self):
        super().__init__()
        #self.settings.clicked.connect(self.show_settings_dialog)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º UI
        self.initUI()


    def initUI(self):
        self.title = 'Tree Segmentation Application ->'
        #self.setWindowTitle(self.title)
        self.setWindowTitle(self.title + f' [{self.get_current_server_url()}]')

        # –°–æ–∑–¥–∞–µ–º –≤–∏–¥–∂–µ—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –ó–∞–¥–∞–µ–º —Ñ–æ—Ä–º—É –∏ —Ç–µ–Ω—å —Ä–∞–º–∫–∏
        # –£—Å—Ç–∞–Ω–æ–≤–∏–º —à–∏—Ä–∏–Ω—É –∏ —Ü–≤–µ—Ç —Ä–∞–º–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2 –ø–∏–∫—Å–µ–ª—è –∏ —á–µ—Ä–Ω—ã–π —Ü–≤–µ—Ç)
        border_width = 8
        border_color = "#ABCDEF" # "black"
        self.image_label1 = QLabel(self)
        self.image_label1.setFixedSize(448, 448)
        self.image_label1.setFrameShape(QFrame.Box)
        self.image_label1.setFrameShadow(QFrame.Plain)
        self.image_label1.setLineWidth(border_width)
        self.image_label1.setStyleSheet(f"border: {border_width}px solid {border_color};")

        self.image_label2 = QLabel(self)
        self.image_label2.setFixedSize(448, 448)
        self.image_label2.setFrameShape(QFrame.Box)
        self.image_label2.setFrameShadow(QFrame.Plain)
        self.image_label2.setLineWidth(border_width)
        self.image_label2.setStyleSheet(f"border: {border_width}px solid {border_color};")

        # –î–æ–±–∞–≤–∏–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è input_scene –∏ output_scene
        self.input_graphics_view = QGraphicsView(self)
        self.input_scene = QGraphicsScene(self)
        self.input_graphics_view.setScene(self.input_scene)

        self.output_graphics_view = QGraphicsView(self)
        self.output_scene = QGraphicsScene(self)
        self.output_graphics_view.setScene(self.output_scene)

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
        self.settings = QPushButton("üíª FastAPI")
        self.load_button = QPushButton("üì• Load Image")
        self.process_button = QPushButton("‚öôÔ∏è AI MODEL")
        self.save_button = QPushButton("üñº Save Result")
        self.clear_button = QPushButton("‚ôªÔ∏è  Clear Form")

        # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏ —à—Ä–∏—Ñ—Ç –∫–Ω–æ–ø–æ–∫
        # self.save_button.setFixedSize(200, 50)
        button_font = QFont()
        button_font.setPointSize(15)
        for button in [self.settings, self.load_button, self.process_button, self.save_button, self.clear_button]:
            button.setFixedSize(button.sizeHint().width()+90, button.sizeHint().height()+20)
            button.setFont(button_font)


        # –°–æ–∑–¥–∞–µ–º –≤–∏–¥–∂–µ—Ç CustomPlot –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –º–∞–∫–µ—Ç
        self.custom_plot = CustomPlot(self)

        # –°–æ–∑–¥–∞–µ–º –º–∞–∫–µ—Ç—ã –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≤–∏–¥–∂–µ—Ç–æ–≤
        image_layout = QHBoxLayout() # –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ (1 —É—Ä–æ–≤–µ–Ω—å)
        image_layout.addWidget(self.image_label1)
        image_layout.addWidget(self.image_label2)
        image_layout.addWidget(self.custom_plot)

        button_layout = QHBoxLayout() # –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ (2 —É—Ä–æ–≤–µ–Ω—å)
        button_layout.addWidget(self.settings)
        button_layout.addWidget(self.load_button)
        button_layout.addWidget(self.process_button)
        button_layout.addWidget(self.save_button)
        button_layout.addWidget(self.clear_button)

        main_layout = QVBoxLayout() # –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ ( 1 + 2 —É—Ä–æ–≤–Ω–∏)
        main_layout.addLayout(image_layout)
        main_layout.addLayout(button_layout)

        self.setLayout(main_layout)
        self.center_on_screen()

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–ª–æ—Ç—ã (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–æ–∫)
        self.settings.clicked.connect(self.settings_func)
        self.load_button.clicked.connect(self.load_image)
        self.process_button.clicked.connect(self.process_image)
        self.save_button.clicked.connect(self.save_output_image)
        self.clear_button.clicked.connect(self.clear_images)

    def show_settings_dialog(self):
        self.dialog = SettingsDialog(self)
        self.dialog.show()

    def update_title(self):
        self.setWindowTitle(self.title + f' [{self.get_current_server_url()}]')


    def get_current_server_url(self):
        current_server_url = "http://api-serv.ru:8001"
        # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–µ—Ä–≤–µ—Ä–∞
        servers_file_path = 'servers.json'
        
        if os.path.exists(servers_file_path):
            # –ï—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –Ω–µ–≥–æ
            with open(servers_file_path, 'r') as f:
                servers = json.load(f)
            
            # –ù–∞—Ö–æ–¥–∏–º —Å–µ—Ä–≤–µ—Ä —Å True –≤ –ø–æ–ª–µ 'active' –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ URL.
            # –ï—Å–ª–∏ —Ç–∞–∫–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
            for server in servers:
                if server.get('active'):
                    current_server_url = f"http://{server.get('server')}:{server.get('port')}"
                    return current_server_url
        
        # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é     
        return current_server_url

    # –ó–¥–µ—Å—å –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –æ–±–Ω–æ–≤–ª—è–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –≤ CustomPlot
    def update_plot(self):
        self.custom_plot.plot()  # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é plot –∏–∑ CustomPlot

    def settings_func(self):
        self.settings_dialog = SettingsDialog(self)
        self.settings_dialog.exec_()

    def load_image(self):
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        options = QFileDialog.Options()
        options |= QFileDialog.ReadOnly
        file_name, _ = QFileDialog.getOpenFileName(self, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "", "Images (*.png *.xpm *.jpg *.bmp);;All Files (*)", options=options)
        if file_name:
            pixmap = QPixmap(file_name)
            self.image_label1.setPixmap(pixmap.scaled(self.image_label1.size(), Qt.KeepAspectRatio, Qt.SmoothTransformation))
            self.input_scene.clear()
            pixmap_item = self.input_scene.addPixmap(self.image_label1.pixmap())


    def process_image(self):
        if not self.input_scene.items():
            return

        try:
            with open("servers.json", "r") as f:
                servers = json.load(f)
        except FileNotFoundError:
            print("servers.json not found!")
            return

        active_server = next((server for server in servers if server["active"]), None)
        if active_server is None:
            print("No active server found!")
            return

        url = f"http://{active_server['server']}:{active_server['port']}/process_image"

        item = self.input_scene.items()[0]
        input_image = item.pixmap().toImage()

        byte_array = QByteArray()
        buffer = QBuffer(byte_array)
        buffer.open(QIODevice.WriteOnly)
        input_image.save(buffer, "PNG")
        image_data = bytes(byte_array)

        try:
            response = requests.post(url, files={"image": ("input_image.png", image_data, "image/png")})
            response.raise_for_status()  # This will raise an exception if the status code is not 200
        except requests.exceptions.RequestException as e:
            print(f"Error: {e}")

            error_message = QMessageBox(self)
            error_message.setWindowTitle("Error")
            error_message.setIcon(QMessageBox.Critical)
            error_message.setText(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å:\n{url}\n\n–û—à–∏–±–∫–∞: {e}")
            error_message.exec_()

            return

        output_image_data = BytesIO(response.content)
        pixmap = QPixmap()
        pixmap.loadFromData(output_image_data.getvalue())
        self.image_label2.setPixmap(pixmap.scaled(self.image_label2.size(), Qt.KeepAspectRatio, Qt.SmoothTransformation))
        self.output_scene.clear()
        pixmap_item = self.output_scene.addPixmap(self.image_label2.pixmap())
        # pixmap_item = self.output_scene.addPixmap(pixmap.scaled(self.output_graphics_view.size(), Qt.KeepAspectRatio, Qt.SmoothTransformation))
        #self.image_label2.setPixmap(pixmap.scaled(self.image_label2.size(), Qt.KeepAspectRatio, Qt.SmoothTransformation))


    def save_output_image(self):
        if not self.output_scene.items():
            return

        timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
        default_filename = f"tree_segmentation_{timestamp}.png"
        options = QFileDialog.Options()
        options |= QFileDialog.DontUseNativeDialog
        filename, _ = QFileDialog.getSaveFileName(
            self,
            "–°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
            default_filename,
            "Images (*.png *.jpg *.bmp);;All Files (*)",
            options=options,
        )

        if filename:
            output_image = self.output_scene.items()[0].pixmap().toImage()
            output_image.save(filename)


    def clear_images(self):
        # –û—á–∏—Å—Ç–∫–∞ –≤–∏–¥–∂–µ—Ç–æ–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        self.image_label1.clear()
        self.image_label2.clear()


    def center_on_screen(self):
        # –ü–æ–ª—É—á–∞–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—é —ç–∫—Ä–∞–Ω–∞
        screen_geometry = QApplication.desktop().availableGeometry()
        # –ü–æ–ª—É—á–∞–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—é –æ–∫–Ω–∞
        window_geometry = self.frameGeometry()
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–µ–Ω—Ç—Ä –æ–∫–Ω–∞ –≤ —Ü–µ–Ω—Ç—Ä —ç–∫—Ä–∞–Ω–∞
        window_geometry.moveCenter(screen_geometry.center())
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ: –æ—Ç–æ–¥–≤–∏–≥–∞–µ–º –æ–∫–Ω–æ –≤–≤–µ—Ä—Ö –Ω–∞ 50 –ø–∏–∫—Å–µ–ª–µ–π
        window_geometry.moveTop(window_geometry.top() - 50)
        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø–æ —ç—Ç–∏–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
        self.move(window_geometry.topLeft())


class ServerForm(QFormLayout):
    def __init__(self, server=None):
        super().__init__()
        self.server_edit = QLineEdit()
        self.port_edit = QLineEdit()
        self.active_button = QRadioButton()

        self.addRow("Server:", self.server_edit)
        self.addRow("Port:", self.port_edit)
        self.addRow("Active:", self.active_button)

        if server:
            self.server_edit.setText(server["server"])
            self.port_edit.setText(str(server["port"]))
            self.active_button.setChecked(server["active"])

    def get_server(self):
        return {
            "server": self.server_edit.text(),
            "port": self.port_edit.text(),
            "active": self.active_button.isChecked()
        }


class SettingsDialog(QDialog):
    def __init__(self, main_window, parent=None):
        super().__init__(parent)
        self.setWindowTitle("Server FastAPI")
        self.main_window = main_window

        self.layout = QVBoxLayout(self)
        self.forms = []

        self.load_servers()

        self.button_box = QDialogButtonBox(QDialogButtonBox.Ok, self)
        self.layout.addWidget(self.button_box)
        self.setLayout(self.layout)

        self.button_box.accepted.connect(self.accept)

    def load_servers(self):
        try:
            with open("servers.json", "r") as f:
                servers = json.load(f)
                for server in servers:
                    form = ServerForm(server)
                    self.forms.append(form)
                    self.layout.insertLayout(self.layout.count() - 1, form)
        except FileNotFoundError:
            form = ServerForm({"server": "api-serv.ru", "port": "8001", "active": False})
            self.forms.append(form)
            self.layout.insertLayout(self.layout.count() - 1, form)

    def accept(self):
        servers = [form.get_server() for form in self.forms]
        with open("servers.json", "w") as f:
            json.dump(servers, f)
        super().accept()
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
        self.main_window.update_title()


if __name__ == "__main__":
    app = QApplication(sys.argv)
    main_window = MainWindow()
    main_window.show()
    sys.exit(app.exec_())
